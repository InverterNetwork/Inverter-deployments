{
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Module__RoleAuthorizer__ModuleNotSelfManaged",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "Module__RoleAuthorizer__NotActiveModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Module__RoleAuthorizer__OwnerRoleCannotBeEmpty",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "burnAdminFromModuleRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "generateRoleId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getManagerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "grantGlobalRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "grantRoleFromModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "hasModuleRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "revokeGlobalRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "revokeRoleFromModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "roleId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "newAdmin",
          "type": "bytes32"
        }
      ],
      "name": "transferAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "burnAdminFromModuleRole(bytes32)": "e99b6e13",
    "generateRoleId(address,bytes32)": "fdd5205f",
    "getManagerRole()": "328c4c30",
    "getOwnerRole()": "55ff58d4",
    "getRoleAdmin(bytes32)": "248a9ca3",
    "getRoleMember(bytes32,uint256)": "9010d07c",
    "getRoleMemberCount(bytes32)": "ca15c873",
    "grantGlobalRole(bytes32,address)": "61bcd0c4",
    "grantRole(bytes32,address)": "2f2ff15d",
    "grantRoleFromModule(bytes32,address)": "e1788154",
    "hasModuleRole(bytes32,address)": "f3aafa70",
    "hasRole(bytes32,address)": "91d14854",
    "renounceRole(bytes32,address)": "36568abe",
    "revokeGlobalRole(bytes32,address)": "99df6ff1",
    "revokeRole(bytes32,address)": "d547741f",
    "revokeRoleFromModule(bytes32,address)": "ba66f9fc",
    "transferAdminRole(bytes32,bytes32)": "e38a584c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Module__RoleAuthorizer__ModuleNotSelfManaged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"Module__RoleAuthorizer__NotActiveModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Module__RoleAuthorizer__OwnerRoleCannotBeEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"burnAdminFromModuleRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"generateRoleId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"grantGlobalRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"grantRoleFromModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"hasModuleRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"revokeGlobalRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"revokeRoleFromModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"newAdmin\",\"type\":\"bytes32\"}],\"name\":\"transferAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"burnAdminFromModuleRole(bytes32)\":{\"details\":\"The module itself can still grant and revoke it's own roles. This only burns third-party access to the role.\",\"params\":{\"role\":\"The role to remove admin access from\"}},\"generateRoleId(address,bytes32)\":{\"params\":{\"module\":\"The address of the module to generate the hash for\",\"role\":\"The ID number of the role to generate the hash for\"},\"returns\":{\"_0\":\"roleId The ID of the role for a module.\"}},\"getManagerRole()\":{\"returns\":{\"_0\":\"managerRoleId The manager role ID\"}},\"getOwnerRole()\":{\"returns\":{\"_0\":\"ownerRoleId The owner role ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantGlobalRole(bytes32,address)\":{\"details\":\"Only the addresses with the Owner role should be able to call this function\",\"params\":{\"role\":\"The role to grant\",\"target\":\"The address to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"grantRoleFromModule(bytes32,address)\":{\"params\":{\"role\":\"The identifier of the role to grant\",\"target\":\"The address to which to grant the role.\"}},\"hasModuleRole(bytes32,address)\":{\"details\":\"It will use the calling address to generate the role ID. Therefore, for checking on anything other than itself, hasRole() should be used\",\"params\":{\"role\":\"The identifier of the role we want to check\",\"who\":\"The address on which to perform the check. \"},\"returns\":{\"_0\":\"hasModuleRole Bool indicating whether the address holds the role\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeGlobalRole(bytes32,address)\":{\"details\":\"Only the addresses with the Owner role should be able to call this function\",\"params\":{\"role\":\"The role to grant\",\"target\":\"The address to grant the role to\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"revokeRoleFromModule(bytes32,address)\":{\"params\":{\"role\":\"The identifier of the role to revoke\",\"target\":\"The address to revoke the role from.\"}},\"transferAdminRole(bytes32,bytes32)\":{\"params\":{\"newAdmin\":\"The new role to which to transfer admin access to\",\"roleId\":\"The role on which to peform the admin transfer\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"Module__RoleAuthorizer__ModuleNotSelfManaged()\":[{\"notice\":\"The function is only callable if the Module is self-managing its roles.\"}],\"Module__RoleAuthorizer__NotActiveModule(address)\":[{\"notice\":\"The function is only callable by an active Module.\"}],\"Module__RoleAuthorizer__OwnerRoleCannotBeEmpty()\":[{\"notice\":\"There always needs to be at least one owner.\"}]},\"kind\":\"user\",\"methods\":{\"burnAdminFromModuleRole(bytes32)\":{\"notice\":\"Irreversibly burns the admin of a given role.\"},\"generateRoleId(address,bytes32)\":{\"notice\":\"Helper function to generate a bytes32 role hash for a module role\"},\"getManagerRole()\":{\"notice\":\"Returns the role ID of the manager role\"},\"getOwnerRole()\":{\"notice\":\"Returns the role ID of the owner role\"},\"grantGlobalRole(bytes32,address)\":{\"notice\":\"Grants a global role to a target\"},\"grantRoleFromModule(bytes32,address)\":{\"notice\":\"Used by a Module to grant a role to a user.\"},\"hasModuleRole(bytes32,address)\":{\"notice\":\"Asks whether an address holds the required module role to execute         the current transaction.\"},\"revokeGlobalRole(bytes32,address)\":{\"notice\":\"Revokes a global role from a target\"},\"revokeRoleFromModule(bytes32,address)\":{\"notice\":\"Used by a Module to revoke a role from a user.\"},\"transferAdminRole(bytes32,bytes32)\":{\"notice\":\"Transfer the admin rights to a given role.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/modules/authorizer/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@oz-up/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@oz/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]},\"lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol\":{\"keccak256\":\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce1815e3a1da24f91b8e2ec24cf09d0d46e0fbeddcbe2cb0d8b2e05b91ceb7b3\",\"dweb:/ipfs/QmYTy1AQB5EV5jwuGsB49yykng2oG3x5ss4bDjFNxk3He4\"]},\"src/modules/authorizer/IAuthorizer.sol\":{\"keccak256\":\"0xdcaf55215b3262742279364176c08499ed1cfd9b5ab3c44d87a1248d7ea80d33\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://a77570dacd5af60bbc116d60a8580daaf6f45efa0e1e77684949ddd96da07c3d\",\"dweb:/ipfs/QmPdabec8xjhESChUEjwUHNvhtSyiS1tFDVLdp5uTF8Jqr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "AccessControlBadConfirmation"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "neededRole",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "AccessControlUnauthorizedAccount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Module__RoleAuthorizer__ModuleNotSelfManaged"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "Module__RoleAuthorizer__NotActiveModule"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Module__RoleAuthorizer__OwnerRoleCannotBeEmpty"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleAdminChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleGranted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleRevoked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnAdminFromModuleRole"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "module",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "generateRoleId",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getManagerRole",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getOwnerRole",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleMember",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleMemberCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "grantGlobalRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "grantRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "grantRoleFromModule"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasModuleRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callerConfirmation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeGlobalRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeRoleFromModule"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "roleId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "newAdmin",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAdminRole"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "burnAdminFromModuleRole(bytes32)": {
            "details": "The module itself can still grant and revoke it's own roles. This only burns third-party access to the role.",
            "params": {
              "role": "The role to remove admin access from"
            }
          },
          "generateRoleId(address,bytes32)": {
            "params": {
              "module": "The address of the module to generate the hash for",
              "role": "The ID number of the role to generate the hash for"
            },
            "returns": {
              "_0": "roleId The ID of the role for a module."
            }
          },
          "getManagerRole()": {
            "returns": {
              "_0": "managerRoleId The manager role ID"
            }
          },
          "getOwnerRole()": {
            "returns": {
              "_0": "ownerRoleId The owner role ID"
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
          },
          "getRoleMember(bytes32,uint256)": {
            "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
          },
          "getRoleMemberCount(bytes32)": {
            "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
          },
          "grantGlobalRole(bytes32,address)": {
            "details": "Only the addresses with the Owner role should be able to call this function",
            "params": {
              "role": "The role to grant",
              "target": "The address to grant the role to"
            }
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
          },
          "grantRoleFromModule(bytes32,address)": {
            "params": {
              "role": "The identifier of the role to grant",
              "target": "The address to which to grant the role."
            }
          },
          "hasModuleRole(bytes32,address)": {
            "details": "It will use the calling address to generate the role ID. Therefore, for checking on anything other than itself, hasRole() should be used",
            "params": {
              "role": "The identifier of the role we want to check",
              "who": "The address on which to perform the check. "
            },
            "returns": {
              "_0": "hasModuleRole Bool indicating whether the address holds the role"
            }
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."
          },
          "revokeGlobalRole(bytes32,address)": {
            "details": "Only the addresses with the Owner role should be able to call this function",
            "params": {
              "role": "The role to grant",
              "target": "The address to grant the role to"
            }
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
          },
          "revokeRoleFromModule(bytes32,address)": {
            "params": {
              "role": "The identifier of the role to revoke",
              "target": "The address to revoke the role from."
            }
          },
          "transferAdminRole(bytes32,bytes32)": {
            "params": {
              "newAdmin": "The new role to which to transfer admin access to",
              "roleId": "The role on which to peform the admin transfer"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burnAdminFromModuleRole(bytes32)": {
            "notice": "Irreversibly burns the admin of a given role."
          },
          "generateRoleId(address,bytes32)": {
            "notice": "Helper function to generate a bytes32 role hash for a module role"
          },
          "getManagerRole()": {
            "notice": "Returns the role ID of the manager role"
          },
          "getOwnerRole()": {
            "notice": "Returns the role ID of the owner role"
          },
          "grantGlobalRole(bytes32,address)": {
            "notice": "Grants a global role to a target"
          },
          "grantRoleFromModule(bytes32,address)": {
            "notice": "Used by a Module to grant a role to a user."
          },
          "hasModuleRole(bytes32,address)": {
            "notice": "Asks whether an address holds the required module role to execute         the current transaction."
          },
          "revokeGlobalRole(bytes32,address)": {
            "notice": "Revokes a global role from a target"
          },
          "revokeRoleFromModule(bytes32,address)": {
            "notice": "Used by a Module to revoke a role from a user."
          },
          "transferAdminRole(bytes32,bytes32)": {
            "notice": "Transfer the admin rights to a given role."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@oz-up/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@oz/=lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 5000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/modules/authorizer/IAuthorizer.sol": "IAuthorizer"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
        "urls": [
          "bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
          "dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol": {
        "keccak256": "0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306",
        "urls": [
          "bzz-raw://ce1815e3a1da24f91b8e2ec24cf09d0d46e0fbeddcbe2cb0d8b2e05b91ceb7b3",
          "dweb:/ipfs/QmYTy1AQB5EV5jwuGsB49yykng2oG3x5ss4bDjFNxk3He4"
        ],
        "license": "MIT"
      },
      "src/modules/authorizer/IAuthorizer.sol": {
        "keccak256": "0xdcaf55215b3262742279364176c08499ed1cfd9b5ab3c44d87a1248d7ea80d33",
        "urls": [
          "bzz-raw://a77570dacd5af60bbc116d60a8580daaf6f45efa0e1e77684949ddd96da07c3d",
          "dweb:/ipfs/QmPdabec8xjhESChUEjwUHNvhtSyiS1tFDVLdp5uTF8Jqr"
        ],
        "license": "LGPL-3.0-only"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/modules/authorizer/IAuthorizer.sol",
    "id": 42617,
    "exportedSymbols": {
      "IAccessControlEnumerable": [
        30874
      ],
      "IAuthorizer": [
        42616
      ]
    },
    "nodeType": "SourceUnit",
    "src": "42:3942:93",
    "nodes": [
      {
        "id": 42522,
        "nodeType": "PragmaDirective",
        "src": "42:23:93",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 42524,
        "nodeType": "ImportDirective",
        "src": "67:96:93",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol",
        "file": "@oz/access/extensions/IAccessControlEnumerable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 42617,
        "sourceUnit": 30875,
        "symbolAliases": [
          {
            "foreign": {
              "id": 42523,
              "name": "IAccessControlEnumerable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 30874,
              "src": "75:24:93",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 42616,
        "nodeType": "ContractDefinition",
        "src": "165:3818:93",
        "nodes": [
          {
            "id": 42531,
            "nodeType": "ErrorDefinition",
            "src": "384:62:93",
            "nodes": [],
            "documentation": {
              "id": 42527,
              "nodeType": "StructuredDocumentation",
              "src": "317:62:93",
              "text": "@notice The function is only callable by an active Module."
            },
            "errorSelector": "18d61cb5",
            "name": "Module__RoleAuthorizer__NotActiveModule",
            "nameLocation": "390:39:93",
            "parameters": {
              "id": 42530,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42529,
                  "mutability": "mutable",
                  "name": "module",
                  "nameLocation": "438:6:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42531,
                  "src": "430:14:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42528,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "430:7:93",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "429:16:93"
            }
          },
          {
            "id": 42534,
            "nodeType": "ErrorDefinition",
            "src": "540:53:93",
            "nodes": [],
            "documentation": {
              "id": 42532,
              "nodeType": "StructuredDocumentation",
              "src": "452:83:93",
              "text": "@notice The function is only callable if the Module is self-managing its roles."
            },
            "errorSelector": "1fab8140",
            "name": "Module__RoleAuthorizer__ModuleNotSelfManaged",
            "nameLocation": "546:44:93",
            "parameters": {
              "id": 42533,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "590:2:93"
            }
          },
          {
            "id": 42537,
            "nodeType": "ErrorDefinition",
            "src": "660:55:93",
            "nodes": [],
            "documentation": {
              "id": 42535,
              "nodeType": "StructuredDocumentation",
              "src": "599:56:93",
              "text": "@notice There always needs to be at least one owner."
            },
            "errorSelector": "73a9f139",
            "name": "Module__RoleAuthorizer__OwnerRoleCannotBeEmpty",
            "nameLocation": "666:46:93",
            "parameters": {
              "id": 42536,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "712:2:93"
            }
          },
          {
            "id": 42547,
            "nodeType": "FunctionDefinition",
            "src": "1302:103:93",
            "nodes": [],
            "documentation": {
              "id": 42538,
              "nodeType": "StructuredDocumentation",
              "src": "820:477:93",
              "text": "@notice Asks whether an address holds the required module role to execute\n         the current transaction.\n @param role The identifier of the role we want to check\n @param who  The address on which to perform the check. \n @dev It will use the calling address to generate the role ID. Therefore, for checking on anything other than itself, hasRole() should be used\n @return hasModuleRole Bool indicating whether the address holds the role"
            },
            "functionSelector": "f3aafa70",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "hasModuleRole",
            "nameLocation": "1311:13:93",
            "parameters": {
              "id": 42543,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42540,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "1333:4:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42547,
                  "src": "1325:12:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42539,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1325:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42542,
                  "mutability": "mutable",
                  "name": "who",
                  "nameLocation": "1347:3:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42547,
                  "src": "1339:11:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42541,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1339:7:93",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1324:27:93"
            },
            "returnParameters": {
              "id": 42546,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42545,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 42547,
                  "src": "1399:4:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 42544,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1399:4:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1398:6:93"
            },
            "scope": 42616,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42557,
            "nodeType": "FunctionDefinition",
            "src": "1694:97:93",
            "nodes": [],
            "documentation": {
              "id": 42548,
              "nodeType": "StructuredDocumentation",
              "src": "1411:278:93",
              "text": "@notice Helper function to generate a bytes32 role hash for a module role\n @param module The address of the module to generate the hash for\n @param role  The ID number of the role to generate the hash for\n @return roleId The ID of the role for a module."
            },
            "functionSelector": "fdd5205f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "generateRoleId",
            "nameLocation": "1703:14:93",
            "parameters": {
              "id": 42553,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42550,
                  "mutability": "mutable",
                  "name": "module",
                  "nameLocation": "1726:6:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42557,
                  "src": "1718:14:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42549,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1718:7:93",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42552,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "1742:4:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42557,
                  "src": "1734:12:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42551,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1734:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1717:30:93"
            },
            "returnParameters": {
              "id": 42556,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42555,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 42557,
                  "src": "1782:7:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42554,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1782:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1781:9:93"
            },
            "scope": 42616,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42565,
            "nodeType": "FunctionDefinition",
            "src": "1976:68:93",
            "nodes": [],
            "documentation": {
              "id": 42558,
              "nodeType": "StructuredDocumentation",
              "src": "1797:174:93",
              "text": "@notice Used by a Module to grant a role to a user.\n @param role The identifier of the role to grant\n @param target  The address to which to grant the role."
            },
            "functionSelector": "e1788154",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "grantRoleFromModule",
            "nameLocation": "1985:19:93",
            "parameters": {
              "id": 42563,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42560,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "2013:4:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42565,
                  "src": "2005:12:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42559,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2005:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42562,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "2027:6:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42565,
                  "src": "2019:14:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42561,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2019:7:93",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2004:30:93"
            },
            "returnParameters": {
              "id": 42564,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2043:0:93"
            },
            "scope": 42616,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42573,
            "nodeType": "FunctionDefinition",
            "src": "2230:69:93",
            "nodes": [],
            "documentation": {
              "id": 42566,
              "nodeType": "StructuredDocumentation",
              "src": "2050:175:93",
              "text": "@notice Used by a Module to revoke a role from a user.\n @param role The identifier of the role to revoke\n @param target  The address to revoke the role from."
            },
            "functionSelector": "ba66f9fc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "revokeRoleFromModule",
            "nameLocation": "2239:20:93",
            "parameters": {
              "id": 42571,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42568,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "2268:4:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42573,
                  "src": "2260:12:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42567,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2260:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42570,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "2282:6:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42573,
                  "src": "2274:14:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42569,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2274:7:93",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2259:30:93"
            },
            "returnParameters": {
              "id": 42572,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2298:0:93"
            },
            "scope": 42616,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42581,
            "nodeType": "FunctionDefinition",
            "src": "2670:70:93",
            "nodes": [],
            "documentation": {
              "id": 42574,
              "nodeType": "StructuredDocumentation",
              "src": "2468:197:93",
              "text": "@notice Transfer the admin rights to a given role.\n @param roleId The role on which to peform the admin transfer\n @param newAdmin The new role to which to transfer admin access to"
            },
            "functionSelector": "e38a584c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferAdminRole",
            "nameLocation": "2679:17:93",
            "parameters": {
              "id": 42579,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42576,
                  "mutability": "mutable",
                  "name": "roleId",
                  "nameLocation": "2705:6:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42581,
                  "src": "2697:14:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42575,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2697:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42578,
                  "mutability": "mutable",
                  "name": "newAdmin",
                  "nameLocation": "2721:8:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42581,
                  "src": "2713:16:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42577,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2713:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2696:34:93"
            },
            "returnParameters": {
              "id": 42580,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2739:0:93"
            },
            "scope": 42616,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42587,
            "nodeType": "FunctionDefinition",
            "src": "2987:56:93",
            "nodes": [],
            "documentation": {
              "id": 42582,
              "nodeType": "StructuredDocumentation",
              "src": "2746:236:93",
              "text": "@notice Irreversibly burns the admin of a given role.\n @param role The role to remove admin access from\n @dev The module itself can still grant and revoke it's own roles. This only burns third-party access to the role."
            },
            "functionSelector": "e99b6e13",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burnAdminFromModuleRole",
            "nameLocation": "2996:23:93",
            "parameters": {
              "id": 42585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42584,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "3028:4:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42587,
                  "src": "3020:12:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42583,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3020:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3019:14:93"
            },
            "returnParameters": {
              "id": 42586,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3042:0:93"
            },
            "scope": 42616,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42595,
            "nodeType": "FunctionDefinition",
            "src": "3280:64:93",
            "nodes": [],
            "documentation": {
              "id": 42588,
              "nodeType": "StructuredDocumentation",
              "src": "3049:226:93",
              "text": "@notice Grants a global role to a target\n @param role The role to grant\n @param target The address to grant the role to\n @dev Only the addresses with the Owner role should be able to call this function"
            },
            "functionSelector": "61bcd0c4",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "grantGlobalRole",
            "nameLocation": "3289:15:93",
            "parameters": {
              "id": 42593,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42590,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "3313:4:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42595,
                  "src": "3305:12:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42589,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3305:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42592,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "3327:6:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42595,
                  "src": "3319:14:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42591,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3319:7:93",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3304:30:93"
            },
            "returnParameters": {
              "id": 42594,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3343:0:93"
            },
            "scope": 42616,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42603,
            "nodeType": "FunctionDefinition",
            "src": "3584:65:93",
            "nodes": [],
            "documentation": {
              "id": 42596,
              "nodeType": "StructuredDocumentation",
              "src": "3350:229:93",
              "text": "@notice Revokes a global role from a target\n @param role The role to grant\n @param target The address to grant the role to\n @dev Only the addresses with the Owner role should be able to call this function"
            },
            "functionSelector": "99df6ff1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "revokeGlobalRole",
            "nameLocation": "3593:16:93",
            "parameters": {
              "id": 42601,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42598,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "3618:4:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42603,
                  "src": "3610:12:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42597,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3610:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42600,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "3632:6:93",
                  "nodeType": "VariableDeclaration",
                  "scope": 42603,
                  "src": "3624:14:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 42599,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3624:7:93",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3609:30:93"
            },
            "returnParameters": {
              "id": 42602,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3648:0:93"
            },
            "scope": 42616,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42609,
            "nodeType": "FunctionDefinition",
            "src": "3755:56:93",
            "nodes": [],
            "documentation": {
              "id": 42604,
              "nodeType": "StructuredDocumentation",
              "src": "3655:95:93",
              "text": "@notice Returns the role ID of the owner role\n @return ownerRoleId The owner role ID"
            },
            "functionSelector": "55ff58d4",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getOwnerRole",
            "nameLocation": "3764:12:93",
            "parameters": {
              "id": 42605,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3776:2:93"
            },
            "returnParameters": {
              "id": 42608,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42607,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 42609,
                  "src": "3802:7:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42606,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3802:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3801:9:93"
            },
            "scope": 42616,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 42615,
            "nodeType": "FunctionDefinition",
            "src": "3923:58:93",
            "nodes": [],
            "documentation": {
              "id": 42610,
              "nodeType": "StructuredDocumentation",
              "src": "3817:101:93",
              "text": "@notice Returns the role ID of the manager role\n @return managerRoleId The manager role ID"
            },
            "functionSelector": "328c4c30",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getManagerRole",
            "nameLocation": "3932:14:93",
            "parameters": {
              "id": 42611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3946:2:93"
            },
            "returnParameters": {
              "id": 42614,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42613,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 42615,
                  "src": "3972:7:93",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42612,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3972:7:93",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3971:9:93"
            },
            "scope": 42616,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 42525,
              "name": "IAccessControlEnumerable",
              "nameLocations": [
                "190:24:93"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 30874,
              "src": "190:24:93"
            },
            "id": 42526,
            "nodeType": "InheritanceSpecifier",
            "src": "190:24:93"
          }
        ],
        "canonicalName": "IAuthorizer",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          42616,
          30874,
          30614
        ],
        "name": "IAuthorizer",
        "nameLocation": "175:11:93",
        "scope": 42617,
        "usedErrors": [
          30541,
          30544,
          42531,
          42534,
          42537
        ],
        "usedEvents": [
          30553,
          30562,
          30571
        ]
      }
    ],
    "license": "LGPL-3.0-only"
  },
  "id": 93
}